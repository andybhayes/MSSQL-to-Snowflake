import pyodbc
import polars as pl
import datetime

# Define your connection parameters
server_name = ''
database_name = 'test1'
username = ''
password = ''
#table_name = 'testtable'
table_name = 'question_2021'


# Create the connection string
connection_string = f'DRIVER={{ODBC Driver 17 for SQL Server}};SERVER={server_name};DATABASE={database_name};UID={username};PWD={password};Trusted_Connection=no;'

# Establish the connection
try:
    conn = pyodbc.connect(connection_string)
    print("Connection successful!")
except pyodbc.Error as e:
    print(f"Connection failed: {e}")
    exit()

# Create a cursor from the connection
cursor = conn.cursor()

# Correct SQL query to select from the table
query = f"SELECT * from {table_name};"

try:
    # Execute the query
    cursor.execute(query)
    results = cursor.fetchall()

    # Get the column names from cursor description
    columns = [column[0] for column in cursor.description]

    # Clean up the data by stripping whitespace from each string element
    cleaned_results = [
        tuple(item.strip() if isinstance(item, str) else item for item in row)
        for row in results
    ]

    # Create the DataFrame with the cleaned results
    df = pl.DataFrame(cleaned_results, schema=columns, orient="row")
    df = df.with_columns(pl.col("ResponseDate").cast(pl.Date).alias("Date"))
    df = df.with_columns(pl.lit(2021).alias("Survey_Year").cast(pl.Int16))
    df = df.drop("ResponseDate")
    print(df)
    cursor.execute(table_name)  # Use tuple to pass both parameters
    conn.commit()  # Commit the changes
    print("LastUpdated timestamp and TableName inserted successfully!")
    df.write_parquet(f"{table_name}.parquet")

except Exception as e:
    print(f"Error while fetching data: {e}")

finally:
    cursor.close()
    conn.close()

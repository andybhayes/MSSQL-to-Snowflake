import pyodbc
import polars as pl
import datetime
from typing import Optional

def create_connection(server_name: str, database_name: str, username: str, password: str) -> Optional[pyodbc.Connection]:
    """Create a database connection with error handling."""
    connection_string = (
        f'DRIVER={{ODBC Driver 17 for SQL Server}};'
        f'SERVER={server_name};'
        f'DATABASE={database_name};'
        f'UID={username};'
        f'PWD={password};'
        f'Trusted_Connection=no;'
    )
    
    try:
        conn = pyodbc.connect(connection_string)
        print("Connection successful!")
        return conn
    except pyodbc.Error as e:
        print(f"Connection failed: {e}")
        return None

def process_data(df: pl.DataFrame) -> pl.DataFrame:
    """Process the dataframe with the required transformations."""
    return (df
        .with_columns(pl.col("ResponseDate").cast(pl.Date).alias("Date"))
        .with_columns(pl.lit(2021).alias("Survey_Year").cast(pl.Int16))
        .drop("ResponseDate")
        .unique()
    )

def main(
    server_name: str,
    database_name: str,
    username: str,
    password: str,
    table_name: str = "dbo.question_2022"
) -> None:
    """Main function to handle the ETL process."""
    
    # Create connection
    conn = create_connection(server_name, database_name, username, password)
    if not conn:
        return
    
    try:
        # Fetch data
        query = f"SELECT * FROM {table_name}"
        df = pl.read_database(query=query, connection=conn)
        
        # Process data
        df = process_data(df)
        print("Processed DataFrame:")
        print(df)
        
        # Save to parquet
        output_filename = f"{table_name.replace('dbo.', '')}.parquet"
        df.write_parquet(output_filename)
        print(f"Data successfully written to {output_filename}")
        
        # Record last successful pull
        last_successful_pull = datetime.datetime.now()
        print(f"Last successful pull: {last_successful_pull}")
        
    except Exception as e:
        print(f"Error during data processing: {e}")
    
    finally:
        conn.close()
        print("Connection closed")

if __name__ == "__main__":
    # Replace these with your actual credentials
    SERVER_NAME = "your_server"
    DATABASE_NAME = "your_database"
    USERNAME = "your_username"
    PASSWORD = "your_password"
    
    main(SERVER_NAME, DATABASE_NAME, USERNAME, PASSWORD)
